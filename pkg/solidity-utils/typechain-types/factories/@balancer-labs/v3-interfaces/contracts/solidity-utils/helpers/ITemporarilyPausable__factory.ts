/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ITemporarilyPausable,
  ITemporarilyPausableInterface,
} from "../../../../../../@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable";

const _abi = [
  {
    inputs: [],
    name: "AlreadyPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyUnPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "BufferPeriodExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "MaxBufferPeriodDuration",
    type: "error",
  },
  {
    inputs: [],
    name: "MaxPauseWindowDuration",
    type: "error",
  },
  {
    inputs: [],
    name: "PauseWindowExpired",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class ITemporarilyPausable__factory {
  static readonly abi = _abi;
  static createInterface(): ITemporarilyPausableInterface {
    return new utils.Interface(_abi) as ITemporarilyPausableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ITemporarilyPausable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ITemporarilyPausable;
  }
}
